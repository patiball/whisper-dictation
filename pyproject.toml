[tool.poetry]
name = "whisper-dictation"
version = "0.1.0"
description = "Multilingual Dictation App based on OpenAI Whisper"
authors = ["Your Name <you@example.com>"]
package-mode = false
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
pyaudio = "^0.2.13"
openai = "^0.28.1"
# without this, poetry will attempt to install `triton` which is not available for macos
# Updated to latest stable version for better M1 compatibility
openai-whisper = { git = "https://github.com/openai/whisper.git", rev = "v20231117" }
llvmlite = "0.41.0"
numba = "0.58.0"
rumps = "^0.4.0"
pynput = "^1.7.6"
# PyTorch z obsługą MPS dla M1 - upgraded for better MPS compatibility
torch = "^2.1.0"
torchvision = "^0.16.0"
torchaudio = "^2.1.0"

[tool.poetry.scripts]
whisper = "whisper-dictation:main"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
librosa = "^0.11.0"
psutil = "^7.0.0"
pytest-cov = "^7.0"
pytest-timeout = "^2.4"
pytest-rerunfailures = "^16.1"
sounddevice = "^0.4.6"
flake8 = "^7.0"
black = "^24.0"
isort = "^5.13"
bandit = "^1.7"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# Test discovery patterns
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

# Test markers
markers = [
    "unit: Fast tests with mocked dependencies",
    "integration: Slower tests with real components",
    "manual: Manual test scenarios requiring human verification",
    "whisper_cpp: Tests specific to C++ implementation",
    "slow: Tests that take longer than 30 seconds"
]

# Coverage configuration
addopts = [
    "--strict-markers",
    "--verbose",
    "--tb=short",
    "--cov=whisper-dictation",
    "--cov=recorder",
    "--cov=transcriber",
    "--cov=device_manager",
    "--cov=mps_optimizer",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=70"
]

testpaths = "tests"

# Minimum version requirements
minversion = "6.0"

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

reruns = 1

[tool.coverage.run]
source = ["."]
