name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run unit tests
      run: |
        poetry run pytest -m unit --cov --cov-report=xml --cov-report=term

    - name: Run integration tests
      run: |
        poetry run pytest -m integration --cov --cov-append --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  lint:
    runs-on: macos-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run black check
      run: |
        poetry run black --check .

    - name: Run isort check
      run: |
        poetry run isort --check-only .

  security:
    runs-on: macos-latest
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Install dependencies
      run: |
        poetry install --with dev

    - name: Run bandit security scan
      run: |
        poetry run bandit -r . -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan
        path: bandit-report.json

  build:
    runs-on: macos-latest
    needs: [test, lint]
    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Install dependencies
      run: |
        poetry install

    - name: Test application import
      run: |
        poetry run python -c "import whisper_dictation; print('Import successful')"

    - name: Test CLI help
      run: |
        poetry run python whisper-dictation.py --help

    - name: Test fast version CLI help
      run: |
        poetry run python whisper-dictation-fast.py --help
